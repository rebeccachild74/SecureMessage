{"version":3,"sources":["AppMode.js","components/NavBar.js","components/SideMenu.js","components/ModeBar.js","components/FloatingButton.js","components/CreateAccountDialog.js","components/ResetPasswordDialog.js","components/LoginPage.js","components/FeedPage.js","components/ConfirmDeleteBox.js","components/RoundsTable.js","components/RoundForm.js","components/Rounds.js","components/CoursesPage.js","components/AboutBox.js","components/DeleteConfirmModal.js","components/AccountBox.js","components/App.js","serviceWorker.js","index.js"],"names":["AppMode","LOGIN","FEED","ROUNDS","ROUNDS_LOGROUND","ROUNDS_EDITROUND","COURSES","Object","freeze","NavBar","getMenuBtnIcon","props","mode","menuOpen","handleMenuBtnClick","changeMode","toggleMenuOpen","className","onClick","this","id","src","alt","height","width","title","React","Component","SideMenu","renderModeMenuItems","profilePicURL","displayName","toggleAccountBox","logOut","ModeBar","FloatingButton","handleClick","CreateAccountDialog","checkAccountValidity","state","accountPassword","accountPasswordRepeat","repeatPassRef","current","setCustomValidity","handleNewAccountChange","event","target","name","value","length","setState","self","reader","FileReader","readAsDataURL","profilePicRef","files","addEventListener","result","setDefaultDisplayName","handleCreateAccount","a","preventDefault","url","accountName","accountInfo","password","securityQuestion","accountSecurityQuestion","securityAnswer","accountSecurityAnswer","fetch","headers","method","body","JSON","stringify","res","status","accountCreateStatus","text","resText","newUserRef","createRef","role","cancelCreateAccount","onSubmit","type","size","placeholder","pattern","required","ref","onChange","onBlur","accept","profilePic","rows","cols","maxLength","ResetPasswordDialog","handleResetPwdChange","thisUser","emailRef","parse","localStorage","getItem","securityRef","passwordRef","handleResetPassword","data","originalPassword","profilePicDataURL","rounds","roundCount","userData","profilePicFile","setItem","togglePasswordModal","repeatPasswordRef","answerEntry","node","style","background","border","backgroundColor","color","close","LoginPage","handleLoginSubmit","loginBtnIcon","loginBtnLabel","emailInputRef","passwordInputRef","window","open","loginMsg","msg","accountCreateMsg","showCreateAccountDialog","handleOAuthLogin","provider","handleOAuthLoginClick","setTimeout","closeResetModal","showResetPasswordDialog","githubIcon","githubLabel","focus","htmlFor","padding","fontSize","FeedPage","fontStyle","ConfirmDeleteBox","deleteRound","RoundsTable","editRound","setEditId","confirmDelete","setDeleteId","showConfirmDelete","hideConfirmDeleteBox","renderTable","table","r","push","key","date","substring","course","Number","strokes","minutes","seconds","keys","colSpan","RoundForm","handleChange","newSec","newSGS","computeSGS","SGS","newStrokes","newMin","handleSubmit","faIcon","btnLabel","roundData","saveRound","min","sec","today","Date","now","getTimezoneOffset","toISOString","substr","holes","notes","thisRound","startData","max","disabled","Rounds","addRound","newData","userObj","alert","refreshOnUpdate","editId","_id","deleteId","val","icon","CoursesPage","AboutBox","modalOpen","toggleAboutModal","DeleteConfirmModal","handlePswdInputChange","enteredPassword","userPassword","passRef","deleteUser","handleDeleteAccount","toggleDelete","isDeleteOpen","AccountBox","getUserInfo","userId","console","log","handleEditAccountChange","removeItem","handleEditAccount","toggleDeleteModal","prevState","nextProps","accountOpen","modeTitle","modeToPage","App","newMode","response","json","obj","handleChangeMode","openMenu","closeMenu","setUserId","Id","authenticated","then","isAuthenticated","user","ModePage","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1864f872.chunk.js","sourcesContent":["/* AppMode: The enumerated type for AppMode. */\r\n\r\nconst AppMode = {\r\n    LOGIN: \"LoginMode\",\r\n    FEED: \"FeedMode\",\r\n    ROUNDS: \"RoundsMode\",\r\n    ROUNDS_LOGROUND: \"RoundsMode-LogRound\",\r\n    ROUNDS_EDITROUND: \"RoundsMode-EditRound\",\r\n    COURSES: \"CoursesMode\"\r\n};\r\n\r\nObject.freeze(AppMode); //This ensures that the object is immutable.\r\n\r\nexport default AppMode;","import React from 'react';\r\nimport AppMode from '../AppMode';\r\n\r\nclass NavBar extends React.Component {\r\n\r\n  getMenuBtnIcon = () => {\r\n      if (this.props.mode === AppMode.ROUNDS_LOGROUND || \r\n          this.props.mode === AppMode.ROUNDS_EDITROUND)\r\n          return \"fa fa-arrow-left\";\r\n      if (this.props.menuOpen)\r\n        return \"fa fa-times\";\r\n      return \"fa fa-bars\";\r\n  }\r\n\r\n  handleMenuBtnClick = () => {\r\n    if (this.props.mode === AppMode.ROUNDS_LOGROUND ||\r\n        this.props.mode === AppMode.ROUNDS_EDITROUND) {\r\n      this.props.changeMode(AppMode.ROUNDS);\r\n    } else if (this.props.mode != AppMode.LOGIN) {\r\n      this.props.toggleMenuOpen();\r\n    }\r\n  }\r\n\r\n    \r\n  render() {\r\n    return (\r\n    <div className=\"navbar\">  \r\n    <span className=\"navbar-items\">\r\n      <button className=\"sidemenu-btn\" onClick={this.handleMenuBtnClick}>\r\n        <span id=\"menuBtnIcon\" className={\"sidemenu-btn-icon \" + this.getMenuBtnIcon()}>\r\n        </span>\r\n      </button>\r\n      <img src=\"http://tiny.cc/sslogo\" alt=\"Speed Score Logo\" height=\"38px\"\r\n      width=\"38px\" />\r\n      <span className=\"navbar-title\">\r\n        &nbsp;{this.props.title}\r\n      </span>\r\n    </span>\r\n  </div>\r\n); \r\n}\r\n}\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\nimport AppMode from './../AppMode.js'\r\n\r\nclass SideMenu extends React.Component {\r\n\r\n//renderModeItems -- Renders correct subset of mode menu items based on\r\n//current mode, which is stored in this.prop.mode. Uses switch statement to\r\n//determine mode.\r\nrenderModeMenuItems = () => {\r\n  switch (this.props.mode) {\r\n    case AppMode.FEED:\r\n      return(\r\n        <div>\r\n        <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-users\"></span>&nbsp;Followed Users</a>\r\n        <a className=\"sidemenu-item \">\r\n            <span className=\"fa fa-search\"></span>&nbsp;Search Feed</a>\r\n        </div>\r\n      );\r\n    break;\r\n    case AppMode.ROUNDS:\r\n      return(\r\n        <div>\r\n          <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-plus\"></span>&nbsp;Log New Round</a>\r\n          <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-search\"></span>&nbsp;Search Rounds</a>\r\n        </div>\r\n      );\r\n    break;\r\n    case AppMode.COURSES:\r\n      return(\r\n        <div>\r\n        <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-plus\"></span>&nbsp;Add a Course</a>\r\n        <a className=\"sidemenu-item\">\r\n            <span className=\"fa fa-search\"></span>&nbsp;Search Courses</a>\r\n        </div>\r\n      );\r\n    default:\r\n        return null;\r\n    }\r\n}\r\n\r\n    render() {\r\n       return (\r\n        <div className={\"sidemenu \" + (this.props.menuOpen ? \"sidemenu-open\" : \"sidemenu-closed\")}\r\n             onClick={this.props.toggleMenuOpen}>\r\n          {/* SIDE MENU TITLE */}\r\n          <div className=\"sidemenu-title\">\r\n            <img src={this.props.profilePicURL} height='60' width='60' />\r\n            <span id=\"userID\" className=\"sidemenu-userID\">&nbsp;{this.props.displayName}</span>\r\n        </div>\r\n          {/* MENU CONTENT */}\r\n          {this.renderModeMenuItems()}\r\n          {/* The following menu items are present regardless of mode */}\r\n          <a id=\"aboutBtn\" className=\"sidemenu-item\">\r\n            <span className=\"fa fa-info-circle\"></span>&nbsp;About</a>\r\n          <a id=\"accountBtn\" className=\"sidemenu-item\" onClick={this.props.toggleAccountBox}>\r\n            <span className=\"fa fa-info-circle\"></span>&nbsp;Account</a>\r\n          <a id=\"logOutBtn\" className=\"sidemenu-item\" onClick={this.props.logOut}>\r\n            <span className=\"fa fa-sign-out-alt\"></span>&nbsp;Log Out</a>\r\n        </div>\r\n       );\r\n    }\r\n}\r\n\r\nexport default SideMenu;\r\n","import React from 'react';\r\nimport AppMode from '../AppMode.js';\r\n\r\n\r\nclass ModeBar extends React.Component {\r\n    render() {\r\n      return(\r\n        <div className={\"modebar\" + (this.props.mode === AppMode.LOGIN ? \r\n          \" invisible\" : (this.props.menuOpen ? \" ignore-click visible\" : \" visible\"))}>\r\n        <a className={(this.props.mode === AppMode.FEED ? \" item-selected\" : null)}\r\n            onClick={()=>this.props.changeMode(AppMode.FEED)}>\r\n          <span className=\"modebaricon fa fa-th-list\"></span>\r\n          <span className=\"modebar-text\">Feed</span>\r\n        </a>\r\n        <a className={(this.props.mode === AppMode.ROUNDS || \r\n               this.props.mode === AppMode.ROUNDS_EDITROUND || \r\n               this.props.mode === AppMode.ROUNDS_LOGROUND ? \r\n                  \" item-selected\" : null)}\r\n           onClick={()=>this.props.changeMode(AppMode.ROUNDS)}>\r\n          <span className=\"modebar-icon  fa fa-history\"></span>\r\n          <span className=\"modebar-text\">Rounds</span>\r\n        </a>\r\n        <a className={(this.props.mode === AppMode.COURSES ? \" item-selected\" : null)}\r\n          onClick={()=>this.props.changeMode(AppMode.COURSES)}>\r\n          <span className=\"modebar-icon  fa fa-flag\"></span>\r\n          <span className=\"modebar-text\">Courses</span>\r\n        </a> \r\n        </div>\r\n      );\r\n    }\r\n}\r\n\r\nexport default ModeBar;\r\n","import React from 'react';\r\n\r\nclass FloatingButton extends React.Component {\r\n    render() {\r\n      return(\r\n        <div className=\"floatbtn\" onClick={this.props.handleClick}>\r\n          <span className=\"floatbtn-icon fa fa-plus\"></span>\r\n        </div>  \r\n      );\r\n    }\r\n}\r\n\r\nexport default FloatingButton;\r\n","import React from 'react';\r\n\r\nclass CreateAccountDialog extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        //Create a ref for the email input DOM element\r\n        this.newUserRef = React.createRef();\r\n        this.repeatPassRef = React.createRef();\r\n        this.profilePicRef = React.createRef();\r\n        this.state = {accountName: \"\",\r\n                      displayName: \"\",\r\n                      profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\",\r\n                      accountPassword: \"\",\r\n                      accountPasswordRepeat: \"\",\r\n                      accountSecurityQuestion: \"\",\r\n                      accountSecurityAnswer: \"\"};\r\n\r\n    }\r\n\r\n    //checkAccountValidity -- Callback function invoked after a form element in\r\n    //the 'Create Account' dialog box changes and component state has been\r\n    //updated. We need to check whether the passwords match. If they do not, \r\n    //we set a custom validity message to be displayed when the user clicks the\r\n    //'Create Account' button. Otherwise, we reset the custom validity message\r\n    //to empty so that it will NOT fire when the user clicks 'Create Account'.\r\n    checkAccountValidity = () => {\r\n        if (this.state.accountPassword != this.state.accountPasswordRepeat) {\r\n            //Passwords don't match\r\n            this.repeatPassRef.current.setCustomValidity(\r\n            \"This password must match original password.\");\r\n        } else {\r\n            this.repeatPassRef.current.setCustomValidity(\"\");\r\n        }\r\n    }\r\n\r\n    //handleNewAccountChange--Called when a field in a dialog box form changes.\r\n    handleNewAccountChange = (event) => {\r\n        if (event.target.name === \"profilePic\") {\r\n            if (event.target.value.length == 0) { //The user canceled the file selection -- set back to default\r\n                this.setState({profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\"});\r\n            } else { //The user selected a file\r\n                const self = this;\r\n                const val = event.target.value;\r\n                const reader = new FileReader();\r\n                reader.readAsDataURL(this.profilePicRef.current.files[0]);\r\n                reader.addEventListener(\"load\",function() {\r\n                    self.setState({profilePicURL: this.result});\r\n                });\r\n            }\r\n        } else {\r\n            this.setState({[event.target.name]: event.target.value},this.checkAccountValidity);\r\n        }\r\n    } \r\n\r\n    //setDefaultDisplayName -- Triggered by onBlur() event of Email field.\r\n    //Sets default value of display name to value entered into Email field \r\n    //as a courtesy.\r\n    setDefaultDisplayName = (event) => {\r\n      if (event.target.value.length > 0 && this.state.displayName === \"\") {\r\n        this.setState({displayName: event.target.value});\r\n      }\r\n    }\r\n\r\n    //handleCreateAccount -- Triggered when user clicks on \"Create Account\" button.\r\n    //Custom data checking ensures user account under this email does not \r\n    //already exist and that the rest of the info is valid. We create a new  \r\n    // object for user, save it to localStorage and take user to app's \r\n    //landing page. \r\n    handleCreateAccount = async (event) =>{\r\n        event.preventDefault();\r\n        const url = '/users/' + this.state.accountName;\r\n        const accountInfo = {\r\n            displayName: this.state.displayName,\r\n            password: this.state.accountPassword,\r\n            profilePicURL: this.state.profilePicURL,\r\n            securityQuestion: this.state.accountSecurityQuestion,\r\n            securityAnswer: this.state.accountSecurityAnswer,\r\n        };\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'POST',\r\n            body: JSON.stringify(accountInfo)}); \r\n        if (res.status == 200) { //successful account creation!\r\n            this.props.accountCreateStatus(\"New account created! Enter credentials to log in.\");\r\n        } else { //Unsuccessful account creation\r\n            //Grab textual error message\r\n            const resText = await res.text();\r\n            this.props.accountCreateStatus(resText);\r\n        }\r\n    }\r\n\r\n    render() {\r\n    return (\r\n    <div className=\"modal\" role=\"dialog\">\r\n        <div className=\"modal-dialog modal-lg\">\r\n        <div className=\"modal-content\">\r\n            <div className=\"modal-header\">\r\n            <center>\r\n            <h3 className=\"modal-title\"><b>Create New Account</b></h3>\r\n            </center>\r\n            <button className=\"close\" \r\n                onClick={this.props.cancelCreateAccount}>\r\n                &times;</button>\r\n            </div>\r\n            <div className=\"modal-body\">\r\n            <form onSubmit={this.handleCreateAccount}>\r\n            <label>\r\n                Email: \r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"accountName\"\r\n                type=\"email\"\r\n                size=\"35\"\r\n                placeholder=\"Enter Email Address\"\r\n                pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                required={true}\r\n                ref={this.newUserRef}\r\n                value={this.state.accountName}\r\n                onChange={this.handleNewAccountChange}\r\n                onBlur={this.setDefaultDisplayName}\r\n                />\r\n            </label>\r\n            <label>\r\n                Password:\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"accountPassword\"\r\n                type=\"password\"\r\n                size=\"35\"\r\n                placeholder=\"Enter Password\"\r\n                pattern=\r\n                \"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\r\n                required={true}\r\n                value={this.state.accountPassword}\r\n                onChange={this.handleNewAccountChange}\r\n                />\r\n            </label>\r\n            <label>\r\n                Repeat Password:\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"accountPasswordRepeat\"\r\n                type=\"password\"\r\n                size=\"35\"\r\n                placeholder=\"Repeat Password\"\r\n                required={true}\r\n                ref={this.repeatPassRef}\r\n                value={this.state.accountPasswordRepeat}\r\n                onChange={this.handleNewAccountChange}\r\n                />\r\n            </label>\r\n            <label>\r\n                Display Name:\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"displayName\"\r\n                type=\"text\"\r\n                size=\"30\"\r\n                placeholder=\"Display Name\"\r\n                required={true}\r\n                value={this.state.displayName}\r\n                onChange={this.handleNewAccountChange}\r\n                />\r\n            </label>\r\n            <label>\r\n                Profile Picture:<br/>\r\n                <input\r\n                className=\"form-control form-text form-center\"\r\n                name=\"profilePic\"\r\n                type=\"file\"\r\n                accept=\"image/x-png,image/gif,image/jpeg\" \r\n                ref={this.profilePicRef}\r\n                value={this.state.profilePic}\r\n                onChange={this.handleNewAccountChange}\r\n                />\r\n                <img src={this.state.profilePicURL} \r\n                        height=\"60\" width=\"60\" />\r\n            </label> \r\n            <label>\r\n                Security Question:\r\n                <textarea\r\n                className=\"form-control form-text form-center\"\r\n                name=\"accountSecurityQuestion\"\r\n                size=\"35\"\r\n                placeholder=\"Security Question\"\r\n                rows=\"2\"\r\n                cols=\"35\"\r\n                maxLength=\"100\"\r\n                required={true}\r\n                value={this.state.accountSecurityQuestion}\r\n                onChange={this.handleNewAccountChange}\r\n                />\r\n            </label>\r\n            <label>\r\n                Answer to Security Question:\r\n                <textarea\r\n                className=\"form-control form-text form-center\"\r\n                name=\"accountSecurityAnswer\"\r\n                type=\"text\"\r\n                placeholder=\"Answer\"\r\n                rows=\"2\"\r\n                cols=\"35\"\r\n                maxLength=\"100\"\r\n                required={true}\r\n                value={this.state.accountSecurityAnswer}\r\n                onChange={this.handleNewAccountChange}\r\n                />\r\n            </label>\r\n            <br/>\r\n            <button role=\"submit\" \r\n                className=\"btn btn-primary btn-color-theme modal-submit-btn\">\r\n                <span className=\"fa fa-user-plus\"></span>&nbsp;Create Account\r\n            </button>\r\n            </form>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    </div>\r\n    );\r\n    }\r\n    }\r\n\r\nexport default CreateAccountDialog;","import React from 'react'\r\n\r\nclass ResetPasswordDialog extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.emailRef = React.createRef();\r\n        this.securityRef = React.createRef();\r\n        this.passwordRef = React.createRef();\r\n        this.repeatPasswordRef = React.createRef();\r\n\r\n        this.state = {\r\n                      mode: \"email\",\r\n                      accountName: \"\",\r\n                      displayName: \"\",\r\n                      profilePicDataURL: \"\",\r\n                      profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\",\r\n                      accountPassword: \"\",\r\n                      accountPasswordRepeat: \"\",\r\n                      originalPassword: \"\",\r\n                      accountSecurityQuestion: \"\",\r\n                      accountSecurityAnswer: \"\",\r\n                      answerEntry: \"\",\r\n                      rounds: {},\r\n                      roundCount: 0\r\n                      };\r\n    }\r\n\r\n    //handleEditAccountChange--Called when a field in a dialog box form changes.\r\n    handleResetPwdChange = (event) => {\r\n        this.setState({[event.target.name]: event.target.value});\r\n\r\n        if(this.state.mode === \"email\"){\r\n            // check for account - need to use database here\r\n            let thisUser = this.emailRef.current.value;\r\n            let data = JSON.parse(localStorage.getItem(thisUser));\r\n            //Check username and password:\r\n            if (data == null) { \r\n                this.emailRef.current.setCustomValidity(\"No account with this email address exists.\");\r\n                return; //Exit the function; no need to check pw validity\r\n            } else {\r\n                this.emailRef.current.setCustomValidity(\"\");\r\n            }\r\n        } else if(this.state.mode === \"question\"){\r\n            if(this.state.accountSecurityAnswer !== event.target.value){\r\n                this.securityRef.current.setCustomValidity(\"Incorrect answer\");\r\n                return; //Exit the function; no need to check pw validity\r\n            } else {\r\n                this.securityRef.current.setCustomValidity(\"\");\r\n            }\r\n        } else if(this.state.mode === \"password\"){\r\n            if(this.state.accountPassword !== event.target.value){\r\n                this.passwordRef.current.setCustomValidity(\"Invalid Password\");\r\n                return; //Exit the function; no need to check pw validity\r\n            } else {\r\n                this.passwordRef.current.setCustomValidity(\"\");\r\n            }\r\n        }\r\n        \r\n    } \r\n\r\n\r\n    handleResetPassword = (event) => {\r\n        event.preventDefault();\r\n\r\n        if(this.state.mode === \"email\"){\r\n            // use database! \r\n            let thisUser = this.emailRef.current.value;\r\n            let data = JSON.parse(localStorage.getItem(thisUser));\r\n\r\n            //Check username and password:\r\n            if (data !== null) {\r\n                this.setState({\r\n                    accountName: thisUser,\r\n                    accountSecurityQuestion: data.securityQuestion,\r\n                    accountSecurityAnswer: data.securityAnswer,\r\n                    originalPassword: data.password,\r\n                    mode: \"question\",\r\n                    displayName: data.displayName,\r\n                    profilePicDataURL: data.profilePicDataURL,\r\n                    profilePicURL: data.profilePicURL,\r\n                    rounds: data.rounds,\r\n                    roundCount: data.roundCount\r\n                    });\r\n            }\r\n        } else if(this.state.mode === \"question\"){\r\n            this.setState({mode: \"password\"});\r\n        } else if(this.state.mode === \"password\"){\r\n            // change the password\r\n            let userData = {\r\n                displayName: this.state.displayName,\r\n                password: this.state.accountPasswordRepeat,\r\n                profilePicFile: this.state.profilePicFile,\r\n                profilePicDataURL: this.state.profilePicDataURL,\r\n                securityQuestion: this.state.accountSecurityQuestion,\r\n                securityAnswer: this.state.accountSecurityAnswer,\r\n                rounds: this.state.rounds,\r\n                roundCount: this.state.roundCount\r\n            };\r\n            //Commit to local storage\r\n            localStorage.setItem(this.state.accountName,JSON.stringify(userData));\r\n\r\n            // toggle modal visibility\r\n            this.props.togglePasswordModal();\r\n\r\n            this.setState({mode: \"email\"});\r\n        }\r\n    }\r\n\r\n    getSecurityQuestion() {\r\n        return \"Question?\";\r\n    }\r\n\r\n    render() {\r\n\r\n        return(\r\n            <div id=\"confirmDeleteModal\" className={\"modal\"}\r\n            role=\"dialog\"\r\n            ref={node => { this.node = node; }}>\r\n                <div className=\"modal-content\" style={{background: \"#fff\"}}>\r\n                    <div className=\"modal-header\">\r\n                        <center>\r\n                        <h3 className=\"modal-title\"><b>Reset Password</b></h3>\r\n                        </center>\r\n                        <button id=\"modalClose\" className=\"close\"\r\n                        style={{border: \"2px solid black\", backgroundColor: \"black\", color: \"white\"}}\r\n                        onClick={this.props.close}>\r\n                        &times;</button>\r\n                    </div>\r\n                    <div className=\"modal-body\">\r\n                        <center>\r\n                        <form onSubmit={this.handleResetPassword}>\r\n                            <label className={(this.state.mode === \"email\") ? \"visible\" : \"invisible\"}>\r\n                                Email: \r\n                                <input\r\n                                className=\"form-control form-text form-center\"\r\n                                name=\"accountName\"\r\n                                type=\"email\"\r\n                                size=\"35\"\r\n                                placeholder=\"Enter Email Address\"\r\n                                pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                                required={(this.state.mode === \"email\")}\r\n                                ref={this.emailRef}\r\n                                value={this.state.accountName}\r\n                                onChange={this.handleResetPwdChange}\r\n                                onBlur={this.setDefaultDisplayName}\r\n                                />\r\n                            </label>\r\n                            <h3 className={(this.state.mode === \"question\") ? \"visible\" : \"invisible\"}>\r\n                                {this.state.accountSecurityQuestion}\r\n                            </h3>\r\n                            <label className={(this.state.mode === \"question\") ? \"visible\" : \"invisible\"}>\r\n                                Answer: \r\n                                <input\r\n                                className=\"form-control form-text form-center\"\r\n                                name=\"answerEntry\"\r\n                                type=\"text\"\r\n                                size=\"35\"\r\n                                placeholder=\"Answer\"\r\n                                required={(this.state.mode === \"question\")}\r\n                                ref={this.securityRef}\r\n                                value={this.state.answerEntry}\r\n                                onChange={this.handleResetPwdChange}\r\n                                onBlur={this.setDefaultDisplayName}\r\n                                />\r\n                            </label>\r\n                            <label className={(this.state.mode === \"password\") ? \"visible\" : \"invisible\"}>\r\n                                Password:\r\n                                <input\r\n                                className=\"form-control form-text form-center\"\r\n                                name=\"accountPassword\"\r\n                                type=\"password\"\r\n                                size=\"35\"\r\n                                placeholder=\"Enter Password\"\r\n                                pattern=\r\n                                \"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\r\n                                required={(this.state.mode === \"password\")}\r\n                                value={this.state.accountPassword}\r\n                                ref={this.passwordRef}\r\n                                onChange={this.handleResetPwdChange}\r\n                                />\r\n                            </label>\r\n                            <label className={(this.state.mode === \"password\") ? \"visible\" : \"invisible\"}>\r\n                                Repeat Password:\r\n                                <input\r\n                                className=\"form-control form-text form-center\"\r\n                                name=\"accountPasswordRepeat\"\r\n                                type=\"password\"\r\n                                size=\"35\"\r\n                                placeholder=\"Repeat Password\"\r\n                                required={(this.state.mode === \"password\")}\r\n                                ref={this.repeatPassRef}\r\n                                value={this.state.accountPasswordRepeat}\r\n                                onChange={this.handleResetPwdChange}\r\n                                />\r\n                            </label>\r\n                            <button role=\"submit\" \r\n                                className=\"btn btn-primary btn-color-theme modal-submit-btn\">&nbsp;Ok\r\n                            </button>\r\n                            </form>\r\n                        </center>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ResetPasswordDialog;","import React from 'react';\r\nimport CreateAccountDialog from './CreateAccountDialog.js';\r\nimport ResetPasswordDialog from './ResetPasswordDialog.js';\r\nimport AppMode from \"./../AppMode.js\";\r\n\r\nclass LoginPage extends React.Component {\r\n\r\nconstructor() {\r\n    super();\r\n    //Create a ref for the email input DOM element\r\n    this.emailInputRef = React.createRef();\r\n    this.passwordInputRef = React.createRef();\r\n    this.state = {accountCreateMsg: \"\",\r\n                  loginBtnIcon: \"fa fa-sign-in\",\r\n                  loginBtnLabel: \"Log In\",\r\n                  showCreateAccountDialog: false,\r\n                  showResetPasswordDialog: false,\r\n                  githubIcon: \"fa fa-github\",\r\n                  githubLabel: \"Sign in with GitHub\",\r\n                  loginMsg: \"\"\r\n                  };\r\n} \r\n    \r\n//Focus cursor in email input field when mounted\r\ncomponentDidMount() {\r\n    this.emailInputRef.current.focus();\r\n}  \r\n\r\n//handleLogin -- Callback function that sets up initial app state upon login.\r\n//handleLogin = () => {\r\n    //Stop spinner\r\n//    this.setState({loginBtnIcon: \"fa fa-sign-in\",\r\n //                  loginBtnLabel: \"Log In\"});\r\n    //Set current user\r\n    //this.props.setUserId(this.emailInputRef.current.value);\r\n    //Trigger switch to FEED mode (default app landing page)\r\n    //this.props.changeMode(AppMode.FEED);\r\n//}\r\n\r\n\r\n//handleLoginSubmit -- Called when user clicks on login button.\r\nhandleLoginSubmit = async (event) => {\r\n    event.preventDefault();\r\n    this.setState({loginBtnIcon: \"fa fa-spin fa-spinner\",\r\n                   loginBtnLabel: \"Logging In...\"});\r\n    const url = \"auth/login?username=\" + this.emailInputRef.current.value +\r\n                \"&password=\" + this.passwordInputRef.current.value;\r\n    const res = await fetch(url, {method: 'POST'}); \r\n    if (res.status == 200) { //successful login!\r\n        window.open(\"/\",\"_self\");\r\n    } else { //Unsuccessful login\r\n      const resText = await res.text();\r\n      this.setState({loginBtnIcon: \"fa fa-sign-in\",\r\n                     loginBtnLabel: \"Log In\",\r\n                     loginMsg: resText});\r\n    }\r\n}\r\n\r\n  //accountCreateStatus -- Called by child CreateAccountDialog component when \r\n  //user attempted to create new account. Hide the dialog and display \r\n  //a message indicating result of the attempt.\r\n  accountCreateStatus = (msg) => {\r\n      this.setState({accountCreateMsg: msg,\r\n                     showCreateAccountDialog: false});\r\n  }\r\n\r\n  //cancelCreateAccount -- Called by child CreateAccountDialog componenet when user decides\r\n  //to cancel creation of new account by clicking the \"X\" in top-right of dialog.\r\n  cancelCreateAccount = () => {\r\n      this.setState({showCreateAccountDialog: false});\r\n  }\r\n\r\n//handleOAuthLogin -- Callback function that initiates contact with OAuth\r\n//provider\r\nhandleOAuthLogin = (provider) => {\r\n    window.open(`/auth/${provider}`,\"_self\");\r\n}\r\n\r\n//handleOAuthLoginClick -- Called whent the user clicks on button to\r\n//authenticate via a third-party OAuth service. The name of the provider is\r\n//passed in as a parameter.\r\nhandleOAuthLoginClick = (provider) => {\r\n   this.setState({[provider + \"Icon\"] : \"fa fa-spin fa-spinner\",\r\n                  [provider + \"Label\"] : \"Connecting...\"});\r\n   setTimeout(() => this.handleOAuthLogin(provider),1000);\r\n}\r\n\r\ncloseResetModal = () => {\r\n    this.setState({showResetPasswordDialog: false});\r\n}\r\n\r\n\r\n  render() {\r\n    return(\r\n        <div id=\"login-mode-div\" className=\"padded-page\">\r\n        <center>\r\n            <h1 />\r\n            {this.state.accountCreateMsg != \"\" ? <p className=\"emphasis\">{this.state.accountCreateMsg}</p> : null}\r\n            {this.state.loginMsg != \"\" ? <p className=\"emphasis\">{this.state.loginMsg}</p> : null}\r\n            <form id=\"loginInterface\" onSubmit={this.handleLoginSubmit}>\r\n            <label htmlFor=\"emailInput\" style={{ padding: 0, fontSize: 24 }}>\r\n                Email:\r\n                <input\r\n                ref={this.emailInputRef}\r\n                className=\"form-control login-text\"\r\n                type=\"email\"\r\n                placeholder=\"Enter Email Address\"\r\n                id=\"emailInput\"\r\n                pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                required={true}\r\n                />\r\n            </label>\r\n            <p />\r\n            <label htmlFor=\"passwordInput\" style={{ padding: 0, fontSize: 24 }}>\r\n                Password:\r\n                <input\r\n                ref={this.passwordInputRef}\r\n                className=\"form-control login-text\"\r\n                type=\"password\"\r\n                placeholder=\"Enter Password\"\r\n                pattern=\"[A-Za-z0-9!@#$%^&*()_+\\-]+\"\r\n                required={true}\r\n                />\r\n            </label>\r\n            <p className=\"bg-danger\" id=\"feedback\" style={{ fontSize: 16 }} />\r\n            <button\r\n                type=\"submit\"\r\n                className=\"btn-color-theme btn btn-primary btn-block login-btn\">\r\n                <span id=\"login-btn-icon\" className={this.state.loginBtnIcon}/>\r\n                &nbsp;{this.state.loginBtnLabel}\r\n            </button>\r\n            <p>\r\n            <button type=\"button\" className=\"btn btn-link login-link\" \r\n                    onClick={() => {this.setState({showCreateAccountDialog: true});}}>\r\n                Create an account</button> | \r\n                <button type=\"button\" className=\"btn btn-link login-link\"\r\n                        onClick={() => {this.setState({showResetPasswordDialog: true});}}>\r\n                Reset your password</button>\r\n            </p>  \r\n            <button type=\"button\" className=\"btn btn-github\"\r\n               onClick={() => this.handleOAuthLoginClick(\"github\")}>\r\n              <span className={this.state.githubIcon}></span>&nbsp;\r\n                {this.state.githubLabel}\r\n            </button>\r\n            <p>\r\n                <i>Version CptS 489</i>\r\n            </p>\r\n            </form>\r\n            {this.state.showCreateAccountDialog ? \r\n              <CreateAccountDialog \r\n                accountCreateStatus={this.accountCreateStatus}\r\n                cancelCreateAccount={this.cancelCreateAccount} /> : null}\r\n            {this.state.showResetPasswordDialog ? <ResetPasswordDialog close={this.closeResetModal}/> : null}\r\n        </center>\r\n        </div>\r\n        )\r\n    }\r\n} \r\n\r\nexport default LoginPage;\r\n","import React from 'react';\r\n\r\nclass FeedPage extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"padded-page\">\r\n            <center>\r\n            <h1 >Activity Feed</h1>\r\n            <h2>This page is under construction.</h2>\r\n            <img src=\"https://dl.dropboxusercontent.com/s/qpjhy9x9gwdxpob/SpeedScoreLogo64Trans.png\" \r\n             height=\"200\" width=\"200\"/>\r\n            <p style={{fontStyle: \"italic\"}}>Version CptS 489 React Demo</p>\r\n            </center>\r\n        </div>\r\n        );\r\n    }   \r\n}\r\n\r\nexport default FeedPage;","import React from 'react';\r\n\r\nclass ConfirmDeleteBox extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"aboutModal\" className=\"modal\" role=\"dialog\">\r\n                <div className=\"modal-content\">\r\n                    <div className=\"modal-header\">\r\n                        <center>\r\n                            <h3 className=\"modal-title\"><b>Confirm Deletion</b></h3>\r\n                        </center>\r\n                        <button id=\"modalClose\" className=\"close\" onClick={this.props.close}>\r\n                            &times;\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"modal-body\">\r\n                        <center>\r\n                            <p>Do you really want to delete this round?</p>\r\n                        </center>\r\n                    </div>\r\n                    <div className=\"modal-footer\">\r\n                        <button className=\"btn btn-danger\" onClick={this.props.deleteRound}>\r\n                        Yes, Delete\r\n                        </button>\r\n                        <button className=\"btn btn-secondary\" onClick={this.props.close}>\r\n                        No, Cancel\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ConfirmDeleteBox;","import React from 'react';\r\nimport ConfirmDeleteBox from './ConfirmDeleteBox.js';\r\nimport AppMode from './../AppMode.js';\r\n\r\nclass RoundsTable extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {showConfirmDelete: false};\r\n  }\r\n\r\n  //editRound -- Triggered when the user clicks the edit button for a given\r\n  //round. The id param is the unique property that identifies the round.\r\n  //Set the state variable representing the id of the round to be edited and\r\n  //then switch to the ROUNDS_EDITROUND mode to allow the user to edit the\r\n  //chosen round.\r\n  editRound = (id) => {\r\n    this.props.setEditId(id);\r\n    this.props.changeMode(AppMode.ROUNDS_EDITROUND);\r\n  }\r\n\r\n  //confirmDelete -- Triggered when the user clicks the delete button\r\n  //for a given round. The id param is the unique property that \r\n  //identifies the round. Set the state variable representing the id\r\n  //of the round to be deleted and then present a dialog box asking\r\n  //the user to confirm the deletion.\r\n  //TO DO: Implement the confirmation dialog box. For now, we\r\n  //present alert box placeholder\r\n  confirmDelete = (id) => {\r\n    this.props.setDeleteId(id);\r\n    this.setState({showConfirmDelete : true});\r\n  }\r\n\r\n  hideConfirmDeleteBox = () => {\r\n    this.setState({showConfirmDelete : false});\r\n  }\r\n\r\n  deleteRound = () => {\r\n    this.hideConfirmDeleteBox();\r\n    this.props.deleteRound();\r\n  }\r\n\r\n  //renderTable -- render an HTML table displaying the rounds logged\r\n  //by the current user and providing buttons to view/edit and delete each round.\r\n  renderTable = () => {\r\n  let table = [];\r\n  for (let r = 0; r < this.props.rounds.length; ++r) {\r\n    table.push(\r\n      <tr key={r}>\r\n        <td>{this.props.rounds[r].date.substring(0,10)}</td>\r\n        <td>{this.props.rounds[r].course}</td>\r\n        <td>{(Number(this.props.rounds[r].strokes) + \r\n              Number(this.props.rounds[r].minutes)) +\r\n              \":\" + (this.props.rounds[r].seconds < 10 ?  \r\n                \"0\" + this.props.rounds[r].seconds :\r\n                this.props.rounds[r].seconds) + \" (\" + \r\n              this.props.rounds[r].strokes + \r\n              \" in \" + this.props.rounds[r].minutes + \":\" + \r\n              (this.props.rounds[r].seconds < 10 ?  \r\n                \"0\" + this.props.rounds[r].seconds :\r\n                this.props.rounds[r].seconds) + \")\"}\r\n        </td>\r\n        <td><button onClick={this.props.menuOpen ? null : () => \r\n          this.editRound(r)}>\r\n              <span className=\"fa fa-eye\"></span></button></td>\r\n        <td><button onClick={this.props.menuOpen ? null : \r\n          () => this.confirmDelete(r)}>\r\n              <span className=\"fa fa-trash\"></span></button></td>\r\n      </tr> \r\n    );\r\n  }\r\n  return table;\r\n  }\r\n\r\n  //render--render the entire rounds table with header, displaying a \"No\r\n  //Rounds Logged\" message in case the table is empty.\r\n  render() {\r\n    return(\r\n    <div className=\"padded-page\">\r\n      <h1></h1>\r\n      <table className=\"table table-hover\">\r\n        <thead className=\"thead-light\">\r\n        <tr>\r\n          <th>Date</th>\r\n          <th>Course</th>\r\n          <th>Score</th>\r\n          <th>View/Edit...</th>\r\n          <th>Delete</th>\r\n        </tr>\r\n        </thead>\r\n        <tbody>\r\n          {Object.keys(this.props.rounds).length === 0 ? \r\n          <tr>\r\n          <td colSpan=\"5\" style={{fontStyle: \"italic\"}}>No rounds logged</td>\r\n          </tr> : this.renderTable()\r\n          }\r\n        </tbody>\r\n      </table>\r\n      {this.state.showConfirmDelete ? \r\n        <ConfirmDeleteBox\r\n          close={this.hideConfirmDeleteBox}\r\n          deleteRound={this.deleteRound} /> : null}\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default RoundsTable;\r\n","import React from 'react';\r\nimport AppMode from './../AppMode.js';\r\n\r\nclass RoundForm extends React.Component {\r\n  constructor(props) {\r\n  super(props);\r\n  //Create date object for today, taking time zone into consideration\r\n  let today = new Date(Date.now()-(new Date()).getTimezoneOffset()*60000);\r\n  //store date as ISO string\r\n  if (this.props.mode === AppMode.ROUNDS_LOGROUND) {\r\n    //If logging a new round, the starting state is a default round with\r\n    //today's date.\r\n    this.state = {date:  today.toISOString().substr(0,10), \r\n                  course: \"\",\r\n                  type: \"practice\",\r\n                  holes: \"18\",\r\n                  strokes: 80,\r\n                  minutes: 50,\r\n                  seconds: \"00\",\r\n                  notes: \"\",\r\n                  faIcon: \"fa fa-save\",\r\n                  btnLabel: \"Save Round Data\"}\r\n  } else {\r\n    //if editing an existing round, the starting state is the round's\r\n    //current data\r\n    let thisRound = {...this.props.startData};\r\n    delete thisRound.id;\r\n    thisRound.faIcon = \"fa fa-edit\";\r\n    thisRound.btnLabel = \"Update Round Data\";\r\n    this.state = thisRound;\r\n  }\r\n}\r\n  \r\n  \r\n    handleChange = (event) => {\r\n        const name = event.target.name;\r\n        if (name === \"seconds\") {\r\n          let newSec = (event.target.value.length < 2 ? \"0\" + \r\n            event.target.value : event.target.value);\r\n          let newSGS = this.computeSGS(this.state.strokes, this.state.minutes, \r\n                                       newSec);\r\n          this.setState({seconds: newSec, SGS: newSGS});\r\n        } else if (name === \"strokes\") {\r\n          let newStrokes = event.target.value;\r\n          let newSGS = this.computeSGS(newStrokes, this.state.minutes, \r\n            this.state.seconds);\r\n          this.setState({strokes: newStrokes, SGS: newSGS});\r\n        } else if (name === \"minutes\") {\r\n            let newMin = event.target.value;\r\n            let newSGS = this.computeSGS(this.state.strokes, newMin, \r\n              this.state.seconds);\r\n            this.setState({minutes: newMin, SGS: newSGS});\r\n        } else {\r\n          this.setState({[name]: event.target.value});\r\n        }\r\n    }\r\n  \r\n  \r\n    //handleSubmit -- When the user clicks on the button to save/update the\r\n    //round, start the spinner and invoke the parent component's saveRound\r\n    //method to do the actual work. Note that saveRound is set to the correct\r\n    //parent method based on whether the user is logging a new round or editing\r\n    //an existing round.\r\n    handleSubmit = (event) => {\r\n        //start spinner\r\n        this.setState({faIcon: \"fa fa-spin fa-spinner\",\r\n                        btnLabel: (this.props.mode === AppMode.ROUNDS_LOGROUND ? \r\n                                    \"Saving...\" : \"Updating...\")});\r\n        //Prepare current round data to be saved\r\n        let roundData = this.state;\r\n        delete roundData.faIcon;\r\n        delete roundData.btnLabel;\r\n        //call saveRound on 1 second delay to show spinning icon\r\n        setTimeout(this.props.saveRound,1000,roundData); \r\n        event.preventDefault(); \r\n        }\r\n  \r\n\r\n    computeSGS = (strokes, min, sec) => {\r\n      return (Number(strokes) + Number(min)) \r\n                  + \":\" + sec;\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <form className=\"padded-page\" onSubmit={this.handleSubmit}>\r\n          <center>\r\n            <label>\r\n              Date:\r\n              <input name=\"date\" className=\"form-control form-center\" \r\n                type=\"date\" value={this.state.date} onChange={this.handleChange} />\r\n            </label>\r\n            <p></p>\r\n            <label>\r\n              Course:\r\n              <input name=\"course\" className=\"form-control form-center\" type=\"text\"\r\n                value={this.state.course} onChange={this.handleChange}\r\n                placeholder=\"Course played\" size=\"50\" maxLength=\"50\" />\r\n            </label>\r\n          <p></p>\r\n          <label>Type:\r\n          <select name=\"type\" value={this.state.type} \r\n            className=\"form-control form-center\" onChange={this.handleChange}>\r\n            <option value=\"practice\">Practice</option>\r\n            <option value=\"tournament\">Tournament</option>\r\n          </select> \r\n          </label>\r\n          <p></p>\r\n          <label># Holes:\r\n          <select name=\"holes\" value={this.state.holes} \r\n            className=\"form-control form-center\" onChange={this.handleChange}>\r\n            <option value=\"9\">9</option>\r\n            <option value=\"18\">18</option>\r\n          </select> \r\n          </label>\r\n          <p></p>\r\n          <label># Strokes:\r\n          <input name=\"strokes\" className=\"form-control form-center\" type=\"number\" \r\n            min=\"9\" max=\"200\" value={this.state.strokes} \r\n            onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <label>Time: <br></br>\r\n          <input name=\"minutes\" type=\"number\" size=\"3\"\r\n            min=\"10\" max=\"400\" value={this.state.minutes}\r\n            onChange={this.handleChange} />:  \r\n          <input name=\"seconds\" type=\"number\" size=\"2\"\r\n            min=\"0\" max=\"60\" value={this.state.seconds} \r\n            onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <label>Speedgolf Score: <br></br>\r\n              <input name=\"SGS\" className=\"form-center\" type=\"text\" size=\"6\" \r\n                disabled={true} value={this.computeSGS(this.state.strokes,this.state.minutes,this.state.seconds)} />\r\n          </label>\r\n          <p></p>\r\n          <label>Notes:\r\n              <textarea name=\"notes\" className=\"form-control\" rows=\"6\" cols=\"75\" \r\n                placeholder=\"Enter round notes\" value={this.state.notes} \r\n                onChange={this.handleChange} />\r\n          </label>\r\n          <p></p>\r\n          <p></p>\r\n          <button type=\"submit\" style={{width: \"70%\",fontSize: \"36px\"}} \r\n            className=\"btn btn-primary btn-color-theme\">\r\n              <span className={this.state.faIcon}/>&nbsp;{this.state.btnLabel}\r\n          </button>\r\n          </center>\r\n        </form>\r\n      );\r\n    }\r\n}\r\n\r\nexport default RoundForm;","//Rounds -- A parent component for the app's \"rounds\" mode.\r\n//Manages the rounds data for the current user and conditionally renders the\r\n//appropriate rounds mode page based on App's mode, which is passed in as a prop.\r\n\r\nimport React from 'react';\r\nimport AppMode from './../AppMode.js';\r\nimport RoundsTable from './RoundsTable.js';\r\nimport RoundForm from './RoundForm.js';\r\nimport FloatingButton from './FloatingButton.js';\r\n\r\nclass Rounds extends React.Component {\r\n\r\n    //Initialize a Rounds object based on local storage\r\n    constructor() {\r\n        super();\r\n        this.state = {deleteId: \"\",\r\n                      editId: \"\"};           \r\n    }\r\n\r\n    //componentDidMount -- After the component moutns, obtain current user's \r\n    //rounds from the server and push them into component state\r\n    // componentDidMount = async () => {\r\n    //     let url = \"/rounds/\" + this.props.userObj.id;\r\n    //     let res = await fetch(url, {method: 'GET'});\r\n    //     if (res.status != 200) {\r\n    //         let msg = await res.text();\r\n    //         alert(\"There was an error obtaining rounds data for this user: \" \r\n    //         + msg);\r\n    //         return;\r\n    //     } \r\n    //     let body = await res.json();\r\n    //     body = JSON.parse(body);\r\n    //     alert(\"in componentDidMount with GET results: \" + body);\r\n    //     this.setState({rounds: body}, this.props.changeMode(AppMode.ROUNDS));\r\n    // }\r\n\r\n    //addRound -- Given an object newData containing a new round, use the \r\n    //server POST route to add the new round to the database. If the add is\r\n    //successful, call on the refreshOnUpdate() method to force the parent\r\n    //App component to refresh its state from the database and re-render itself,\r\n    //allowing the change to be propagated to the Rounds table. Then switch\r\n    //the mode back to AppMode.ROUNDS since the user is done adding a round.\r\n    addRound = async (newData) => {\r\n        const url = '/rounds/' + this.props.userObj.id;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'POST',\r\n            body: JSON.stringify(newData)}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            alert(\"An error occurred when attempting to add new round to database: \"    \r\n            + msg);\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }\r\n    }\r\n\r\n    //editRound -- Given an object newData containing updated data on an\r\n    //existing round, update the current user's round in the database. \r\n    //toggle the mode back to AppMode.ROUNDS since the user is done editing the\r\n    //round. \r\n    editRound = async (newData) => {\r\n        const url = '/rounds/' + this.props.userObj.id + '/' + \r\n            this.props.userObj.rounds[this.state.editId]._id;\r\n        const res = await fetch(url, {\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n                },\r\n            method: 'PUT',\r\n            body: JSON.stringify(newData)}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            alert(\"An error occurred when attempting to add new round to database: \" \r\n            + msg);\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }\r\n    }\r\n\r\n\r\n    //deleteRound -- Delete the current user's round uniquely identified by\r\n    //this.state.deleteId, delete from the database, and reset deleteId to empty.\r\n    deleteRound = async () => {\r\n        //TO DO: Fill this in\r\n        alert(\"Deleting Round: \" + this.state.deleteId);\r\n        const url = '/rounds/' + this.props.userObj.id + '/' + \r\n            this.props.userObj.rounds[this.state.deleteId]._id;\r\n        const res = await fetch(url, {\r\n            method: 'DELETE'}); \r\n        const msg = await res.text();\r\n        if (res.status != 200) {\r\n            alert(\"An error occurred when attempting to delete a round from the database: \" \r\n            + msg);\r\n            this.props.changeMode(AppMode.ROUNDS);\r\n        } else {\r\n            this.props.refreshOnUpdate(AppMode.ROUNDS);\r\n        }\r\n\r\n        this.setState({ deleteId:null });\r\n    }\r\n \r\n    //setDeleteId -- Capture in this.state.deleteId the unique id of the item\r\n    //the user is considering deleting.\r\n    setDeleteId = (val) => {\r\n        this.setState({deleteId: val});\r\n    }\r\n\r\n    //setEditId -- Capture in this.state.editId the unique id of the item\r\n    //the user is considering editing.\r\n    setEditId = (val) => {\r\n        this.setState({editId: val});\r\n    }\r\n    on\r\n    //render -- Conditionally render the Rounds mode page as either the rounds\r\n    //table, the rounds form set to obtain a new round, or the rounds form set\r\n    //to edit an existing round.\r\n    render() {\r\n        switch(this.props.mode) {\r\n            case AppMode.ROUNDS:\r\n                return (\r\n                    <>\r\n                    <RoundsTable \r\n                        rounds={this.props.userObj.rounds}\r\n                        setEditId={this.setEditId}\r\n                        setDeleteId={this.setDeleteId}\r\n                        deleteRound={this.deleteRound}\r\n                        changeMode={this.props.changeMode}\r\n                        menuOpen={this.props.menuOpen} /> \r\n                    <FloatingButton\r\n                        handleClick={() => \r\n                        this.props.changeMode(AppMode.ROUNDS_LOGROUND)}\r\n                        menuOpen={this.props.menuOpen}\r\n                        icon={\"fa fa-plus\"} />\r\n                    </>\r\n                );\r\n            case AppMode.ROUNDS_LOGROUND:\r\n                return (\r\n                    <RoundForm\r\n                        mode={this.props.mode}\r\n                        startData={\"\"} \r\n                        saveRound={this.addRound} />\r\n                );\r\n            case AppMode.ROUNDS_EDITROUND:\r\n                let thisRound = {...this.props.userObj.rounds[this.state.editId]};\r\n                thisRound.date = thisRound.date.substr(0,10);\r\n                if (thisRound.seconds < 10) {\r\n                    thisRound.seconds = \"0\" + thisRound.seconds;\r\n                } \r\n                delete thisRound.SGS;\r\n                return (\r\n                    <RoundForm\r\n                        mode={this.props.mode}\r\n                        startData={thisRound} \r\n                        saveRound={this.editRound} />\r\n                );\r\n        }\r\n    }\r\n\r\n}   \r\n\r\nexport default Rounds;\r\n","import React from 'react';\r\n\r\nclass CoursesPage extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"padded-page\">\r\n            <center>\r\n            <h1 >Courses</h1>\r\n            <h2>This page is under construction.</h2>\r\n            <img src=\"https://dl.dropboxusercontent.com/s/qpjhy9x9gwdxpob/SpeedScoreLogo64Trans.png\" \r\n             height=\"200\" width=\"200\"/>\r\n            <p style={{fontStyle: \"italic\"}}>Version CptS 489 React Demo</p>\r\n            </center>\r\n        </div>\r\n        );\r\n    }   \r\n}\r\n\r\nexport default CoursesPage;","import React from 'react';\r\nimport AppMode from './../AppMode.js'\r\n\r\nclass AboutBox extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div id=\"aboutModal\" className={\"modal \" + (this.props.modalOpen ? \"visible\" : \"invisible\")}\r\n            role=\"dialog\"\r\n            // ref callback for storing node reference\r\n            ref={node => { this.node = node; }}>\r\n                <div className=\"modal-content\" style={{background: \"#fff\"}}>\r\n                    <div className=\"modal-header\">\r\n                        <center>\r\n                        <h3 className=\"modal-title\"><b>About SwimStats</b></h3>\r\n                        </center>\r\n                        <button id=\"modalClose\" className=\"close\"\r\n                        style={{border: \"2px solid black\", backgroundColor: \"black\", color: \"white\"}}\r\n                        onClick={this.props.toggleAboutModal}>\r\n                        &times;</button>\r\n                    </div>\r\n                    <div className=\"modal-body\">\r\n                        <center>\r\n                        <h3>The World's Best App for\r\n                        Keeping Track of your Swim Times</h3>\r\n                        </center>\r\n                        <p>SwimStats apps support</p>\r\n                        <ul>\r\n                        <li>live meet scoring</li>\r\n                        <li>tracking personal times and sharing results</li>\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"modal-footer\">\r\n                            <button className=\"close\"\r\n                            style={{border: \"2px solid black\", backgroundColor: \"black\", color: \"white\"}}\r\n                            onClick={this.props.toggleAboutModal}>\r\n                            OK</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AboutBox;","import React from 'react';\r\nimport AppMode from './../AppMode.js'\r\n\r\nclass DeleteConfirmModal extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.passRef = React.createRef();\r\n\r\n        this.state = {\r\n            enteredPassword: \"\",\r\n        };\r\n\r\n    }\r\n\r\n    handlePswdInputChange = (event) => {\r\n        this.setState({enteredPassword: event.target.value});\r\n        if(event.target.value !== this.props.userPassword){\r\n            this.passRef.current.setCustomValidity(\r\n                \"Invalid password\");\r\n        } else {\r\n            this.passRef.current.setCustomValidity(\"\");\r\n            this.setState({enteredPassword: event.target.value});\r\n        }\r\n    } \r\n\r\n    deleteUser = (event) => {\r\n        // if the password matches, call props delete method.\r\n        event.preventDefault();\r\n\r\n        if(this.state.enteredPassword === this.props.userPassword){\r\n            this.props.handleDeleteAccount(event);\r\n            this.props.toggleDelete();\r\n        }\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div id=\"aboutModal\" className={\"delete modal \" + (this.props.isDeleteOpen ? \"visible\" : \"invisible\")}\r\n            role=\"dialog\"\r\n            // ref callback for storing node reference\r\n            ref={node => { this.node = node; }}>\r\n                <div className=\"modal-content\" style={{background: \"#fff\"}}>\r\n                    <div className=\"modal-header\">\r\n                        <center>\r\n                        <h3 className=\"modal-title\"><b>Delete Account</b></h3>\r\n                        </center>\r\n                        <button id=\"modalClose\" className=\"close\"\r\n                        style={{border: \"2px solid black\", backgroundColor: \"black\", color: \"white\"}}\r\n                        onClick={this.props.toggleDelete}>\r\n                        &times;</button>\r\n                    </div>\r\n                    <div className=\"modal-body\">\r\n                        <center>\r\n                        <h3>Enter your password to delete your account</h3>\r\n                        </center>\r\n                        <form onSubmit={this.deleteUser}>\r\n                        <label>\r\n                            Password:\r\n                            <input\r\n                            className=\"form-control form-text form-center\"\r\n                            name=\"accountPassword\"\r\n                            type=\"password\"\r\n                            size=\"35\"\r\n                            placeholder=\"Enter Password to Delete Account\"\r\n                            required={true}\r\n                            ref={this.passRef}\r\n                            onChange={this.handlePswdInputChange}\r\n                            value={this.state.enteredPassword}\r\n                            />\r\n                        </label>\r\n                        <br />\r\n                        <button role=\"submit\" \r\n                            className=\"btn btn-primary btn-color-theme modal-submit-btn\">&nbsp;Confirm Delete Account\r\n                        </button>\r\n                        <button \r\n                            className=\"btn btn-primary btn-color-theme modal-submit-btn\"\r\n                            onClick={this.props.toggleDelete}>&nbsp;Cancel\r\n                        </button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DeleteConfirmModal;","import React from 'react';\r\nimport DeleteConfirmModal from './DeleteConfirmModal.js';\r\nimport AppMode from './../AppMode.js'\r\n\r\nclass AccountBox extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        //Create a ref for the email input DOM element\r\n        this.newUserRef = React.createRef();\r\n        this.repeatPassRef = React.createRef();\r\n        this.profilePicRef = React.createRef();\r\n        this.state = {\r\n                      isDeleteOpen: false,\r\n                      accountName: \"\",\r\n                      displayName: \"\",\r\n                      profilePicDataURL: \"\",\r\n                      profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\",\r\n                      accountPassword: \"\",\r\n                      accountPasswordRepeat: \"\",\r\n                      originalPassword: \"\",\r\n                      accountSecurityQuestion: \"\",\r\n                      accountSecurityAnswer: \"\",\r\n                      rounds: {},\r\n                      roundCount: 0\r\n                      };\r\n\r\n    }\r\n\r\n    // used to get user information to edit\r\n    componentWillReceiveProps(nextProps) {\r\n        this.getUserInfo();\r\n    }\r\n\r\n    getUserInfo = () => {\r\n        let thisUser = this.props.userId;\r\n        let data = JSON.parse(localStorage.getItem(thisUser));\r\n\r\n        // update the fields if its not null\r\n        if (data !== null) {\r\n            this.setState({\r\n                accountName: this.props.userId,\r\n                displayName: data.displayName,\r\n                accountPassword: data.password,\r\n                originalPassword: data.password,\r\n                profilePicDataURL: data.profilePicDataURL,\r\n                accountSecurityQuestion: data.securityQuestion,\r\n                accountSecurityAnswer: data.securityAnswer,\r\n                rounds: data.rounds,\r\n                roundCount: data.roundCount\r\n            });\r\n        }\r\n    }\r\n\r\n    //checkAccountValidity -- Callback function invoked after a form element in\r\n    //the 'Create Account' dialog box changes and component state has been\r\n    //updated. We need to check whether the passwords match. If they do not, \r\n    //we set a custom validity message to be displayed when the user clicks the\r\n    //'Create Account' button. Otherwise, we reset the custom validity message\r\n    //to empty so that it will NOT fire when the user clicks 'Create Account'.\r\n    checkAccountValidity = () => {\r\n        if (this.state.accountPassword != this.state.accountPasswordRepeat && this.state.accountPasswordRepeat != \"\") {\r\n            //Passwords don't match\r\n            this.repeatPassRef.current.setCustomValidity(\r\n                \"Passwords don't match.\");\r\n        } else {\r\n            this.repeatPassRef.current.setCustomValidity(\"\");\r\n        }\r\n        let data = JSON.parse(localStorage.getItem(this.newUserRef.current.value));\r\n        if (data != null) {\r\n            // Update existing user\r\n            console.log(\"update existing user\");\r\n            /* this.newUserRef.current.setCustomValidity(\"An account already exists under this email address. \" +\r\n              \"Use 'Reset password' to recover the password.\"); */\r\n        } else {\r\n            this.newUserRef.current.setCustomValidity(\"\");\r\n        }\r\n    }\r\n\r\n    //handleEditAccountChange--Called when a field in a dialog box form changes.\r\n    handleEditAccountChange = (event) => {\r\n        if (event.target.name === \"profilePic\") {\r\n            if (event.target.value.length == 0) { //The user canceled the file selection -- set back to default\r\n                this.setState({profilePicDataURL: \"\",\r\n                profilePicURL: \"https://icon-library.net//images/default-profile-icon/default-profile-icon-24.jpg\"});\r\n            } else { //The user selected a file\r\n                const self = this;\r\n                const val = event.target.value;\r\n                const reader = new FileReader();\r\n                reader.readAsDataURL(this.profilePicRef.current.files[0]);\r\n                reader.addEventListener(\"load\",function() {\r\n                    self.setState({profilePicURL: \"\",\r\n                                   profilePicDataURL: this.result});\r\n                });\r\n            }\r\n        } else {\r\n            this.setState({[event.target.name]: event.target.value},this.checkAccountValidity);\r\n        }\r\n    } \r\n\r\n    //setDefaultDisplayName -- Triggered by onBlur() event of Email field.\r\n    //Sets default value of display name to value entered into Email field \r\n    //as a courtesy.\r\n    setDefaultDisplayName = (event) => {\r\n      if (event.target.value.length > 0 && this.state.displayName === \"\") {\r\n        this.setState({displayName: event.target.value});\r\n      }\r\n    }\r\n\r\n    handleDeleteAccount = (event) => {\r\n        event.preventDefault();\r\n\r\n        // delete account after logging out\r\n        this.props.changeMode(AppMode.LOGIN);\r\n\r\n        //this.props.toggleAccountBox();\r\n        localStorage.removeItem(this.props.userId);\r\n    }\r\n\r\n    //handleEditAccount -- Triggered when user clicks on \"Create Account\" button.\r\n    //Custom data checking ensures user account under this email does not \r\n    //already exist and that the rest of the info is valid. We create a new  \r\n    // object for user, save it to localStorage and take user to app's \r\n    //landing page. \r\n    handleEditAccount = (event) => {\r\n        event.preventDefault();\r\n        // assume user does not want to update password\r\n        if(this.state.accountPasswordRepeat === \"\" && this.state.accountPassword === this.state.originalPassword){\r\n            let userData = {\r\n                displayName: this.state.displayName,\r\n                password: this.state.originalPassword,\r\n                profilePicFile: this.state.profilePicFile,\r\n                profilePicDataURL: this.state.profilePicDataURL,\r\n                securityQuestion: this.state.accountSecurityQuestion,\r\n                securityAnswer: this.state.accountSecurityAnswer,\r\n                rounds: this.state.rounds,\r\n                roundCount: this.state.roundCount\r\n            };\r\n            //Commit to local storage\r\n            localStorage.setItem(this.state.accountName,JSON.stringify(userData));\r\n            //Invite user to log in using new account\r\n            //this.props.newAccountCreated();\r\n        } else if(this.state.accountPassword === this.state.accountPasswordRepeat){\r\n            let userData = {\r\n                displayName: this.state.displayName,\r\n                password: this.state.accountPassword,\r\n                profilePicFile: this.state.profilePicFile, //if empty, use default\r\n                profilePicDataURL: this.state.profilePicDataURL,\r\n                securityQuestion: this.state.accountSecurityQuestion,\r\n                securityAnswer: this.state.accountSecurityAnswer,\r\n                rounds: this.state.rounds,\r\n                roundCount: this.state.roundCount\r\n            };\r\n            //Commit to local storage\r\n            localStorage.setItem(this.state.accountName,JSON.stringify(userData));\r\n            //Invite user to log in using new account\r\n            //this.props.newAccountCreated();\r\n        } else if (this.state.accountPassword !== this.state.originalPassword && this.state.accountPassword !== this.state.accountPasswordRepeat){ // The password field has changed, verify that the password and repeat match.\r\n            this.repeatPassRef.current.setCustomValidity(\r\n                \"Passwords don't match.\");\r\n                return;\r\n        }\r\n        this.props.toggleAccountBox();\r\n    }\r\n\r\n    toggleDeleteModal = () => {\r\n        this.setState(prevState => ({isDeleteOpen: !prevState.isDeleteOpen}));\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div>\r\n            <DeleteConfirmModal\r\n            isDeleteOpen={this.state.isDeleteOpen}\r\n            toggleDelete={this.toggleDeleteModal}\r\n            handleDeleteAccount={this.handleDeleteAccount}\r\n            userPassword={this.state.accountPassword}/>\r\n        <div className=\"modal\" role=\"dialog\" className={\"account modal \" + (this.props.accountOpen ? \"visible\" : \"invisible\")}>\r\n            <div className=\"modal-dialog modal-lg\">\r\n            <div className=\"modal-content\">\r\n                <div className=\"modal-header\">\r\n                <center>\r\n                <h3 className=\"modal-title\"><b>Edit Account</b></h3>\r\n                </center>\r\n                <button className=\"close\" \r\n                    onClick={this.props.toggleAccountBox}>\r\n                    &times;</button>\r\n                </div>\r\n                <div className=\"modal-body\">\r\n                <form onSubmit={this.handleEditAccount}>\r\n                <label>\r\n                    Email: \r\n                    <input\r\n                    className=\"form-control form-text form-center\"\r\n                    name=\"accountName\"\r\n                    type=\"email\"\r\n                    size=\"35\"\r\n                    placeholder=\"Enter Email Address\"\r\n                    pattern=\"[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}\"\r\n                    required={true}\r\n                    ref={this.newUserRef}\r\n                    onChange={this.handleEditAccountChange}\r\n                    value={this.state.accountName}\r\n                    onBlur={this.setDefaultDisplayName}\r\n                    />\r\n                </label>\r\n                <label>\r\n                    Password:\r\n                    <input\r\n                    className=\"form-control form-text form-center\"\r\n                    name=\"accountPassword\"\r\n                    type=\"password\"\r\n                    size=\"35\"\r\n                    placeholder=\"Enter Password\"\r\n                    pattern=\r\n                    \"(?=^.{8,}$)((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$\"\r\n                    required={true}\r\n                    onChange={this.handleEditAccountChange}\r\n                    value={this.state.accountPassword}\r\n                    />\r\n                </label>\r\n                <label>\r\n                    Repeat Password:\r\n                    <input\r\n                    className=\"form-control form-text form-center\"\r\n                    name=\"accountPasswordRepeat\"\r\n                    type=\"password\"\r\n                    size=\"35\"\r\n                    placeholder=\"Repeat Password\"\r\n                    ref={this.repeatPassRef}\r\n                    onChange={this.handleEditAccountChange}\r\n                    value={this.state.accountPasswordRepeat}\r\n                    />\r\n                </label>\r\n                <label>\r\n                    Display Name:\r\n                    <input\r\n                    className=\"form-control form-text form-center\"\r\n                    name=\"displayName\"\r\n                    type=\"text\"\r\n                    size=\"30\"\r\n                    placeholder=\"Display Name\"\r\n                    required={true}\r\n                    onChange={this.handleEditAccountChange}\r\n                    value={this.state.displayName}\r\n                    />\r\n                </label>\r\n                <label>\r\n                    Profile Picture:<br/>\r\n                    <input\r\n                    className=\"form-control form-text form-center\"\r\n                    name=\"profilePic\"\r\n                    type=\"file\"\r\n                    accept=\"image/x-png,image/gif,image/jpeg\" \r\n                    ref={this.profilePicRef}\r\n                    onChange={this.handleEditAccountChange}\r\n                    value={this.state.profilePic}\r\n                    />\r\n                    <img src={this.state.profilePicURL != \"\" ? \r\n                                this.state.profilePicURL :\r\n                                this.state.profilePicDataURL} \r\n                            height=\"60\" width=\"60\" />\r\n                </label> \r\n                <label>\r\n                    Security Question:\r\n                    <textarea\r\n                    className=\"form-control form-text form-center\"\r\n                    name=\"accountSecurityQuestion\"\r\n                    size=\"35\"\r\n                    placeholder=\"Security Question\"\r\n                    rows=\"2\"\r\n                    cols=\"35\"\r\n                    maxLength=\"100\"\r\n                    required={true}\r\n                    onChange={this.handleEditAccountChange}\r\n                    value={this.state.accountSecurityQuestion}\r\n                    />\r\n                </label>\r\n                <label>\r\n                    Answer to Security Question:\r\n                    <textarea\r\n                    className=\"form-control form-text form-center\"\r\n                    name=\"accountSecurityAnswer\"\r\n                    type=\"text\"\r\n                    placeholder=\"Answer\"\r\n                    rows=\"2\"\r\n                    cols=\"35\"\r\n                    maxLength=\"100\"\r\n                    required={true}\r\n                    onChange={this.handleEditAccountChange}\r\n                    value={this.state.accountSecurityAnswer}\r\n                    />\r\n                </label>\r\n                <br/>\r\n                <button\r\n                    className=\"btn btn-secondary btn-color-theme modal-submit-btn\"\r\n                    onClick={this.toggleDeleteModal}>\r\n                    &nbsp;Delete Account\r\n                </button>\r\n                <br />\r\n                <button role=\"submit\" \r\n                    className=\"btn btn-primary btn-color-theme modal-submit-btn\">\r\n                    <span className=\"fa fa-user-plus\"></span>&nbsp;Update Account\r\n                </button>\r\n                </form>\r\n                </div>\r\n            </div>\r\n            </div>\r\n        </div>\r\n        </div>\r\n    );\r\n    }\r\n    }\r\n\r\nexport default AccountBox;","import React from 'react';\r\nimport NavBar from './NavBar.js';\r\nimport SideMenu from './SideMenu.js';\r\nimport ModeBar from './ModeBar.js';\r\nimport FloatingButton from './FloatingButton.js';\r\nimport LoginPage from './LoginPage.js';\r\nimport AppMode from \"./../AppMode.js\"\r\nimport FeedPage from './FeedPage.js';\r\nimport Rounds from './Rounds.js';\r\nimport CoursesPage from './CoursesPage.js';\r\nimport AboutBox from './AboutBox.js';\r\nimport AccountBox from './AccountBox.js';\r\n\r\nconst modeTitle = {};\r\nmodeTitle[AppMode.LOGIN] = \"Welcome to SpeedScore\";\r\nmodeTitle[AppMode.FEED] = \"Activity Feed\";\r\nmodeTitle[AppMode.ROUNDS] = \"My Rounds\";\r\nmodeTitle[AppMode.ROUNDS_LOGROUND] = \"Log New Round\";\r\nmodeTitle[AppMode.ROUNDS_EDITROUND] = \"Edit Round\";\r\nmodeTitle[AppMode.COURSES] = \"Courses\";\r\n\r\nconst modeToPage = {};\r\nmodeToPage[AppMode.LOGIN] = LoginPage;\r\nmodeToPage[AppMode.FEED] = FeedPage;\r\nmodeToPage[AppMode.ROUNDS] = Rounds;\r\nmodeToPage[AppMode.ROUNDS_LOGROUND] = Rounds;\r\nmodeToPage[AppMode.ROUNDS_EDITROUND] = Rounds;\r\nmodeToPage[AppMode.COURSES] = CoursesPage;\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {mode: AppMode.LOGIN,\r\n                  menuOpen: false,\r\n                  authenticated: false,\r\n                  userObj: {displayName: \"\", profilePicURL: \"\"},\r\n                 };\r\n  }\r\n\r\n  //componentDidMount\r\n  componentDidMount() {\r\n    if (!this.state.authenticated) { \r\n      //Use /auth/test route to (re)-test authentication and obtain user data\r\n      fetch(\"/auth/test\")\r\n        .then((response) => response.json())\r\n        .then((obj) => {\r\n          if (obj.isAuthenticated) {\r\n            this.setState({\r\n              userObj: obj.user,\r\n              authenticated: true,\r\n              mode: AppMode.FEED //We're authenticated so can get into the app.\r\n            });\r\n          }\r\n        }\r\n      )\r\n    } \r\n  }\r\n\r\n  //refreshOnUpdate(newMode) -- Called by child components when user data changes in \r\n  //the database. The function calls the users/:userid (GET) route to update \r\n  //the userObj state var based on the latest database changes, and sets the \r\n  //mode state var is set to newMode. After this method is called, the\r\n  //App will re-render itself, forcing the new data to \r\n  //propagate to the child components when they are re-rendered.\r\n  refreshOnUpdate = async(newMode) => {\r\n    let response = await fetch(\"/users/\" + this.state.userObj.id);\r\n    response = await response.json();\r\n    const obj = JSON.parse(response);\r\n    this.setState({\r\n      userObj: obj,\r\n      mode: newMode\r\n    });\r\n  }\r\n\r\n\r\n  handleChangeMode = (newMode) => {\r\n    this.setState({mode: newMode});\r\n  }\r\n\r\n  openMenu = () => {\r\n    this.setState({menuOpen : true});\r\n  }\r\n  \r\n  closeMenu = () => {\r\n    this.setState({menuOpen : false});\r\n  }\r\n\r\n  toggleMenuOpen = () => {\r\n    this.setState(prevState => ({menuOpen: !prevState.menuOpen}));\r\n  }\r\n\r\n  setUserId = (Id) => {\r\n    this.setState({userId: Id,\r\n                   authenticated: true});\r\n  }\r\n\r\n  toggleAboutModal = () => {\r\n    this.setState(prevState => ({modalOpen: !prevState.modalOpen}));\r\n  }\r\n\r\n  toggleAccountBox = () => {\r\n    \r\n    this.setState(prevState => ({accountOpen: !prevState.accountOpen}));\r\n  }\r\n\r\n  render() {\r\n    const ModePage = modeToPage[this.state.mode];\r\n    return (\r\n      <div>\r\n        <NavBar \r\n          title={modeTitle[this.state.mode]} \r\n          mode={this.state.mode}\r\n          changeMode={this.handleChangeMode}\r\n          menuOpen={this.state.menuOpen}\r\n          toggleMenuOpen={this.toggleMenuOpen}/>\r\n          <SideMenu \r\n            menuOpen = {this.state.menuOpen}\r\n            mode={this.state.mode}\r\n            toggleMenuOpen={this.toggleMenuOpen}\r\n            toggleAccountBox={this.toggleAccountBox}\r\n            userId={this.state.userId}\r\n            changeMode={this.handleChangeMode}\r\n            displayName={this.state.userObj.displayName}\r\n            profilePicURL={this.state.userObj.profilePicURL}\r\n            logOut={() => this.handleChangeMode(AppMode.LOGIN)}/>\r\n          <AboutBox\r\n            modalOpen = {this.state.modalOpen}\r\n            toggleAboutModal={this.toggleAboutModal}/>\r\n          <AccountBox\r\n            userId = {this.state.userId}\r\n            accountOpen = {this.state.accountOpen}\r\n            toggleAccountBox={this.toggleAccountBox}\r\n            changeMode={this.handleChangeMode}/>\r\n          <ModeBar \r\n            mode={this.state.mode} \r\n            changeMode={this.handleChangeMode}\r\n            menuOpen={this.state.menuOpen}/>\r\n          <ModePage \r\n            menuOpen={this.state.menuOpen}\r\n            mode={this.state.mode}\r\n            changeMode={this.handleChangeMode}\r\n            userObj={this.state.userObj}\r\n            refreshOnUpdate={this.refreshOnUpdate}/>\r\n      </div>\r\n    );  \r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'bootstrap-social/bootstrap-social.css';\r\nimport 'font-awesome/css/font-awesome.min.css';\r\nimport './styles/index.css';\r\nimport App from './components/App.js';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}